#! /usr/bin/ruby

ENV['GEM_HOME'] = "#{Dir.pwd}/autoproj/gems"
ENV['PATH']     = "#{ENV['GEM_HOME']}/bin:#{ENV['PATH']}"
if $LOADED_FEATURES.find { |str| str =~ /bygems/ }
    ENV['RUBYOPT']  = ""
    exec "ruby", __FILE__
end

ENV['RUBYOPT']  = "-rubygems"

require 'yaml'
require 'set'
require 'rubygems'

module Autoproj
    class << self
        attr_reader :verbose
    end
end

module Autobuild
    module Subprocess
        def self.run(name, phase, *cmd)
            `#{cmd.join(" ")}`
            if $?.exitstatus != 0
                STDERR.puts "ERROR: failed to run #{cmd.join(" ")}"
                exit 1
            end
        end
    end
end

OSDEPS_CODE

DEFS = <<EODEFS
ruby:
    debian: 
        - ruby1.8-dev
        - ruby1.8
        - libopenssl-ruby1.8

build-essential:
    debian: build-essential

libxml2:
    debian:
        - libxml2-dev
libxslt:
    debian:
        - libxslt1-dev
autoproj: gem
EODEFS

PACKAGES      = %w{ruby libxml2 libxslt build-essential}
USER_PACKAGES = %w{autoproj}

packages = PACKAGES.dup
if ARGV.first != "dev"
    packages += USER_PACKAGES
end

osdeps_management = Autoproj::OSDependencies.new(YAML.load(DEFS))
STDERR.puts "autoproj: installing autoproj and its dependencies (this can take a long time)"
osdeps_management.install(packages)

if ARGV.first != "dev"
    Autobuild::Subprocess.run('bootstrap', 'post', 'autoproj', 'bootstrap')
end

File.open('env.sh', 'w') do |io|
    io.write <<-EOSHELL
export RUBYOPT=-rubygems
export GEM_HOME=#{Dir.pwd}/autoproj/gems
export PATH=$GEM_HOME/bin:$PATH
    EOSHELL
end

STDERR.puts <<EOTEXT


add the following line at the bottom of your .bashrc:
  source #{Dir.pwd}/env.sh

WARNING: autoproj will not work until your restart all
your consoles, or run the following in them:
  $ source #{Dir.pwd}/env.sh

EOTEXT

