#! /usr/bin/ruby

ENV['GEM_HOME'] = "#{Dir.pwd}/.gems"
ENV['PATH']     = "#{ENV['GEM_HOME']}/bin:#{ENV['PATH']}"
if $LOADED_FEATURES.find { |str| str =~ /bygems/ }
    ENV['RUBYOPT']  = ""
    exec "ruby", __FILE__, *ARGV
end

ENV['RUBYOPT']  = "-rubygems"

require 'yaml'
require 'set'
require 'rubygems'

module Autoproj
    class ConfigError < RuntimeError; end
    class << self
        attr_reader :verbose
    end
end

module Autobuild
    module Subprocess
        def self.run(name, phase, *cmd)
            `#{cmd.join(" ")}`
            if $?.exitstatus != 0
                STDERR.puts "ERROR: failed to run #{cmd.join(" ")}"
                exit 1
            end
        end
    end
end

OSDEPS_CODE

DEFS = <<EODEFS
OSDEPS_DEFAULTS
EODEFS

PACKAGES      = %w{ruby libxml2 libxslt build-essential}
USER_PACKAGES = %w{autoproj}

packages = PACKAGES.dup
if ARGV.first != "dev"
    packages += USER_PACKAGES
end

begin
    osdeps_management = Autoproj::OSDependencies.new(YAML.load(DEFS))
    STDERR.puts "autoproj: installing autoproj and its dependencies (this can take a long time)"
    osdeps_management.install(packages)
rescue Autoproj::ConfigError => e
    STDERR.puts "failed: #{e.message}"
    exit(1)
end

if ARGV.first != "dev"
    Autobuild::Subprocess.run('bootstrap', 'post', 'autoproj', 'bootstrap', *ARGV)
end

File.open('env.sh', 'w') do |io|
    io.write <<-EOSHELL
export RUBYOPT=-rubygems
export GEM_HOME=#{Dir.pwd}/.gems
export PATH=$GEM_HOME/bin:$PATH
    EOSHELL
end

STDERR.puts <<EOTEXT


add the following line at the bottom of your .bashrc:
  source #{Dir.pwd}/env.sh

WARNING: autoproj will not work until your restart all
your consoles, or run the following in them:
  $ source #{Dir.pwd}/env.sh

EOTEXT

