#! /usr/bin/env ruby

require "enumerator"
require 'autobuild'
require 'autobuild/reporting'
require 'autoproj/autobuild'
require 'autoproj/base'
require 'autoproj/version'
require 'autoproj/manifest'
require 'autoproj/osdeps'
require 'autoproj/system'
require 'autoproj/options'
require 'autoproj/cmdline'
require 'logger'
require 'utilrb/logger'

include Autoproj

root_dir =
    begin Autoproj.root_dir
    rescue UserError => error
        if ENV['GEM_HOME']
            Dir.chdir(File.join(ENV['GEM_HOME'], '..'))
            begin Autoproj.root_dir
            rescue UserError
                raise error
            end
        else
            raise
        end
    end

Autoproj.silent = true
selection = Autoproj::CmdLine.parse_arguments(ARGV, false).first
Autoproj::CmdLine.update_os_dependencies = false
Dir.chdir(Autoproj.root_dir)
Autoproj::CmdLine.initialize
Autoproj::CmdLine.load_configuration
Autoproj::CmdLine.initial_package_setup

selection_rx = Regexp.new(Regexp.quote(selection))
candidates = []
Autoproj.manifest.each_package do |pkg|
    name = pkg.name
    next if !Autoproj.manifest.package_enabled?(name)

    srcdir = Autobuild::Package[name].srcdir
    if name == selection
        puts srcdir
        exit(0)
    elsif name =~ selection_rx
        candidates << srcdir
    end
end

if candidates.empty?
    STDERR.puts Autoproj.console.color("cannot find #{selection} in the current autoproj installation", :bold, :red)
    exit 1
elsif candidates.size > 1
    STDERR.puts Autoproj.console.color("multiple packages match #{selection} in the current autoproj installation: #{candidates.join(", ")}", :bold, :red)
    exit 1
else
    puts candidates.first
    exit(0)
end

