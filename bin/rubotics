#! /usr/bin/env ruby

require 'rubotics'
include Rubotics

module Rubotics
    @verbose = false
    class << self
        attr_accessor :verbose
    end
end

def tail(file, count)
    lines = File.readlines(file)
    if lines.size < count
        lines
    else
        lines[-count, count]
    end
end

# Find the rubotics root dir
root_dir = Rubotics.root_dir

# Load autobuild-related stuff from rubotics (not loaded by default)
require 'rubotics/autobuild'

Rubotics.load_config

# Set up some important autobuild parameters
Autobuild.prefix  = Rubotics.build_dir
Autobuild.srcdir  = root_dir
Autobuild.doc_errors = false
Autobuild.do_doc = false
Autobuild::Reporting << Autobuild::StdoutReporter.new

# Parse the configuration options
mail_config = Hash.new
parser = OptionParser.new do |opts|
    opts.on("--reconfigure", "re-ask all configuration options") do
        Rubotics.reconfigure = true
    end
    opts.on("--no-update", "do not update already checked-out sources") do
        Autobuild.do_update = false
    end
    opts.on("--doc", "only build documentation") do
        Autobuild.do_doc = true
        Autobuild.only_doc = true
    end

    opts.on("--verbose", "verbose output") do
        Rubotics.verbose  = true
        Autobuild.verbose = true
        Rake.application.options.trace = false
    end
    opts.on("--debug", "debugging output") do
        Rubotics.verbose  = true
        Autobuild.verbose = true
        Rake.application.options.trace = true
    end
    opts.on('--nice NICE', Integer, 'nice the subprocesses to the given value') do |value|
        Autobuild.nice = value
    end
    opts.on("-h", "--help", "Show this message") do
        puts opts
        exit
    end
    opts.on("--mail-from EMAIL", String, "From: field of the sent mails") do |from_email|
        mail[:from] = from_email
    end
    opts.on("--mail-to EMAILS", String, "comma-separated list of emails to which the reports should be sent") do |emails| 
        mail[:to] ||= []
        mail[:to] += emails.split(',')
    end
    opts.on("--mail-subject SUBJECT", String, "Subject: field of the sent mails") do |subject_email|
        mail[:subject] = subject_email
    end
    opts.on("--mail-smtp HOSTNAME", String, " address of the mail server written as hostname[:port]") do |smtp|
        raise "invalid SMTP specification #{smtp}" unless smtp =~ /^([^:]+)(?::(\d+))?$/
            mail[:smtp] = $1
        mail[:port] = Integer($2) if $2 && !$2.empty?
    end
    opts.on("--mail-only-errors", "send mail only on errors") do
        mail[:only_errors] = true
    end
end

args = ARGV.dup
parser.parse!(args)
packages = args

if Autobuild.mail[:to]
    if !Autobuild::HAS_RMAIL
        STDERR.puts "RMail is not available. Mail notification is disabled"
    else
        Autobuild::Reporting << MailReporter.new(Autobuild.mail)
    end
end

begin
    Dir.chdir(root_dir) do
        # Load the manifest
        manifest = Rubotics.manifest = Manifest.load(File.join('rubotics', 'manifest'))
        STDERR.puts "rubotics: updating remote sources"
        manifest.update_remote_sources

        # If in verbose mode, list the sources
        if Rubotics.verbose
            STDERR.puts "Sources:"
            manifest.each_source do |source|
                STDERR.puts "  #{source.name}: #{source.vcs}, local: #{source.local_dir} with options #{source.vcs.options.inspect}"
            end
        end

        # Load the required autobuild definitions
        STDERR.puts
        STDERR.puts "rubotics: loading build files and configuring build"
        if !Rubotics.reconfigure?
            STDERR.puts "run 'rubotics --reconfigure' to change configuration values"
        end
        manifest.each_autobuild_file do |source, name|
            if Rubotics.manifest.enabled_source?(source)
                Rubotics.import_autobuild_file source, name
            end
        end

        Rubotics.save_config

        # Now, load the package's importer configurations
        manifest.load_importers

        if Rubotics.verbose
            # List defined packages, and in which autobuild files they are defined
            STDERR.puts "Available packages:"
            Rubotics.manifest.packages.each_value do |package, source, file|
                STDERR.puts "  #{package.name}: #{file} from #{source.name}"
            end
        end

        # Create the build target from the manifest if the user did not provide an
        # explicit one
        if packages.empty?
            enabled_sources = Rubotics.manifest.enabled_sources
            packages = manifest.packages.values.map do |package, source, _|
                package.name if Rubotics.manifest.enabled_source?(source)
            end.compact
        end

        if packages.empty?
            STDERR.puts
            STDERR.puts "rubotics: no packages defined"
            exit 0
        end

        if Rubotics.verbose
            STDERR.puts "will install #{packages.join(", ")}"
        end

        # Do the import, so that we can load the manifests
        STDERR.puts
        STDERR.puts "rubotics: updating packages"
        begin
            import_targets = packages.map { |pkg| "#{pkg}-import" }
            task "rubotics-import" => import_targets
            Rake::Task["rubotics-import"].invoke
        rescue Autobuild::SubcommandFailed => e
            lines = File.readlines(e.logfile)
            lines = if lines.size > 13
                        lines[-10, 10]
                    else
                        lines[3..-1]
                    end

            STDERR.puts
            STDERR.puts "ERROR: cannot import #{e.target}, the importer failed with"
            lines.each do |line|
                STDERR.puts "ERROR: #{line}"
            end
            exit(1)
        end

        # Load package manifests, apply dependencies to the autobuild definitions
        # and install OS packages
        pkg_manifests = []
        manifest.each_package do |pkg|
            pkg_manifests << File.join(pkg.srcdir, "manifest.xml")
        end
        manifest.load_package_manifests
        STDERR.puts
        STDERR.puts "rubotics: installing prepackaged dependencies"
        manifest.install_os_dependencies

        # And now build
        STDERR.puts
        if Autobuild.only_doc
            STDERR.puts "rubotics: building and installing documentation"
        else
            STDERR.puts "rubotics: building and installing packages"
        end

        Autobuild::Reporting.report do
            Autobuild.apply(packages)
            Autobuild::Reporting.success
        end
    end
rescue ConfigError => e
    STDERR.puts e.message
rescue Interrupt
    STDERR.puts "Interrupted by user"
end

